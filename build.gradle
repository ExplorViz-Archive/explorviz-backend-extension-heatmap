plugins {
    id 'java'
    id 'eclipse'  
    id 'application'
    id "com.github.johnrengelman.shadow" version "5.1.0"
}

apply from: 'https://raw.githubusercontent.com/ExplorViz/gradle-script-plugins/master/microservice.gradle'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

repositories {
    jcenter()
  	maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}


configurations.all {
	resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

ext {
  // Version tag for the Explorviz-Backend-Shared project dependency
  // https://github.com/ExplorViz/explorviz-backend-shared
  // Published at Sonatype: https://oss.sonatype.org/content/repositories/snapshots/net/explorviz/
  explorvizSharedVersion = 'v1.5.0-SNAPSHOT'
  
  // Version tag for core model classes
  // Published at Sonatype: https://oss.sonatype.org/content/repositories/snapshots/net/explorviz/
  explorvizModelVersion = '1.5.0-SNAPSHOT'
}

dependencies {

	// ExplorViz provides a project that contains shared source code classes for 
	// different concerns. See:
	// https://github.com/ExplorViz/explorviz-backend-shared

  	// ExplorViz config injection
  	implementation group: 'net.explorviz', name: 'config-injection', version: "${explorvizSharedVersion}"
  	
  	// ExplorViz common exception handling
  	implementation group: 'net.explorviz', name: 'exception-handling', version: "${explorvizSharedVersion}"

	implementation group: 'net.explorviz', name: 'common-concerns', version: "${explorvizSharedVersion}"  	
  	
  	implementation group: 'net.explorviz', name: 'security', version: "${explorvizSharedVersion}"
  	
  	// ExplorViz landscape model
  	implementation group: 'net.explorviz', name: 'landscape-model', version: "${explorvizModelVersion}"
  	
  	// Local linking of external project dependency instead of Sonatype (change also settings.gradle)
  	//implementation project(':common-concerns') 	
  	  	
  	// Subscribe to ExplorViz Backend Events, e.g., new landscape every tenth second
  	implementation group: 'org.apache.kafka', name: 'kafka_2.12', version: '2.2.0'
  		
    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
}

// Disable standard Jar build and
// use fat-Jar instead with all dependencies
assemble.dependsOn shadowJar
jar.enabled = false

// Define the main class for the gradle jar task
jar {
  manifest {
    attributes(
      'Main-Class': 'net.explorviz.extension.heatmap.main.Main'
    )
  }
}

// Define the main class for the gradle application tasks
application {
    mainClassName = 'net.explorviz.extension.heatmap.main.Main'
}

shadowJar {
  archiveName = "${project.name}.${extension}"
}

// Renaming Dummy task
// Run with ./gradlew renameProject -PextensionName="X"
task renameProject() {
  if (project.hasProperty('extensionName')) {
  
	// temporary dir for modification (needed for Win OS based on current gradle implementation)
	def tmpDir = 'tmp'
	
	// default src dir
	def srcDir = 'src'
	
	// default base dir
	def baseDir = '.'
	
	// Rename dummy package and replace dummy string import declarations
    def newExtensionName = project.property('extensionName')
    def javaSrcDir = srcDir + '/main/java/net/explorviz/extension/'
	
	println("Trying to rename backend extension from dummy to: " + newExtensionName)
	
	// initial setup
	// copy src folder to tmp dir for modification
	copy {	
		from srcDir
		into tmpDir + '/' + srcDir
	}
		
	// delete old src folder
	delete srcDir
		
	// Rename dummy package and replace dummy string import declarations
	copy {
		from tmpDir + '/' + javaSrcDir + 'dummy'
		filter{it.replaceAll("\\.dummy\\.", "\\." + newExtensionName + "\\.")}
		into javaSrcDir + newExtensionName
	}
		
	// Replace dummy string in explorviz.properties
    String file = new File(tmpDir + '/' + "src/main/resources/explorviz.properties").getText("UTF-8")
    file = file.replaceAll("dummy-", newExtensionName + "-")
    new File(tmpDir + '/' + "src/main/resources/explorviz.properties").write(file, "UTF-8")
	
	// Replace dummy string in settings.gradle
    file = new File("settings.gradle").getText("UTF-8")
    file = file.replaceAll("-dummy", "-" + newExtensionName)
    new File(tmpDir + '/' + "settings.gradle").write(file, "UTF-8")
    
    // Replace dummy string in build.gradle
    file = new File("build.gradle").getText("UTF-8")
    file = file.replaceAll("extension.heatmap", "extension." + newExtensionName)
    new File(tmpDir + '/' + "build.gradle").write(file, "UTF-8")
	
	// java src files 
	copy {	
		from tmpDir + '/' + srcDir
		into srcDir
	}
		
	// settings.gradle
	copy {	
		from tmpDir
		into baseDir
		include 'settings.gradle'
		include 'build.gradle'
	}
		
	//cleanup
	delete javaSrcDir + '/dummy'
	delete tmpDir
		
	println("Backend extension renamed to: " + newExtensionName)
  }
}